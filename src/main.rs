use anyhow::{bail, Result};
use core::str;
use core::time::Duration;
use embedded_svc::{
    http::{client::Client, Method},
    io::Read,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::peripheral,
    hal::prelude::Peripherals,
    http::client::{Configuration, EspHttpConnection},
    wifi::{AuthMethod, BlockingWifi, ClientConfiguration, EspWifi},
};
use futures::Future;
use moksha_core::{
    blind::BlindedMessage,
    keyset::V1Keysets,
    primitives::{
        CurrencyUnit, GetMeltOnchainResponse, KeysResponse, MintInfoResponse,
        PostMeltBolt11Response, PostMeltOnchainResponse, PostMeltQuoteBolt11Response,
        PostMeltQuoteOnchainResponse, PostMintBolt11Response, PostMintOnchainResponse,
        PostMintQuoteBolt11Response, PostMintQuoteOnchainResponse, PostSwapResponse,
    },
    proof::Proofs,
};
use moksha_wallet::{
    client::CashuClient,
    error::MokshaWalletError,
    localstore::{RexieTransaction, WalletKeyset},
};
use std::str::FromStr;
use std::sync::{Arc, Mutex};
use tokio::runtime::Runtime;
use url::Url;

use log::info;

pub struct Config {
    wifi_ssid: &'static str,
    wifi_psk: &'static str,
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = Config {
        wifi_psk: "password",
        wifi_ssid: "wifi",
    };

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    let localstore = EspFlashLocalStore::new();
    let client = EspHttpCashuClient::new();
    let wallet: moksha_wallet::wallet::Wallet<EspFlashLocalStore, EspHttpCashuClient> =
        moksha_wallet::wallet::WalletBuilder::default()
            .with_client(client)
            .with_localstore(localstore)
            .with_mint_url(Url::parse("http://192.168.1.237:3338").unwrap())
            .build()
            .await
            .map_err(|e| {
                if matches!(
                    e,
                    moksha_wallet::error::MokshaWalletError::UnsupportedApiVersion
                ) {
                    println!("Error: Mint does not support /v1 api");
                    std::process::exit(1);
                }
                e
            })?;

    Ok(())
}

fn get(url: impl AsRef<str>, method: Method) -> Result<()> {
    // 1. Create a new EspHttpConnection with default Configuration. (Check documentation)
    let connection = EspHttpConnection::new(&Configuration::default())?;
    // 2. Get a client using the embedded_svc Client::wrap method. (Check documentation)
    let mut client = Client::wrap(connection);

    // 3. Open a GET request to `url`
    let headers = [("accept", "text/plain")];
    // ANCHOR: request
    let request = client.request(method, url.as_ref(), &headers)?;
    // ANCHOR_END: request

    // 4. Submit the request and check the status code of the response.
    // Successful http status codes are in the 200..=299 range.
    let response = request.submit()?;
    let status = response.status();
    println!("Response code: {}\n", status);
    match status {
        200..=299 => {
            // 5. If the status is OK, read response data chunk by chunk into a buffer and print it until done.
            //
            // NB. There is no guarantee that chunks will be split at the boundaries of valid UTF-8
            // sequences (in fact it is likely that they are not) so this edge case needs to be handled.
            // However, for the purposes of clarity and brevity(?), the additional case of completely invalid
            // UTF-8 sequences will not be handled here and is left as an exercise for the reader.
            let mut buf = [0_u8; 256];
            // Offset into the buffer to indicate that there may still be
            // bytes at the beginning that have not been decoded yet
            let mut offset = 0;
            // Keep track of the total number of bytes read to print later
            let mut total = 0;
            let mut reader = response;
            loop {
                // read into the buffer starting at the offset to not overwrite
                // the incomplete UTF-8 sequence we put there earlier
                if let Ok(size) = Read::read(&mut reader, &mut buf[offset..]) {
                    if size == 0 {
                        // It might be nice to check if we have any left over bytes here (ie. the offset > 0)
                        // as this would mean that the response ended with an invalid UTF-8 sequence, but for the
                        // purposes of this training we are assuming that the full response will be valid UTF-8
                        break;
                    }
                    // Update the total number of bytes read
                    total += size;
                    // 6. Try converting the bytes into a Rust (UTF-8) string and print it.
                    // Remember that we read into an offset and recalculate the real length
                    // of the bytes to decode.
                    let size_plus_offset = size + offset;
                    match str::from_utf8(&buf[..size_plus_offset]) {
                        Ok(text) => {
                            // buffer contains fully valid UTF-8 data,
                            // print it and reset the offset to 0.
                            print!("{}", text);
                            offset = 0;
                        }
                        Err(error) => {
                            // The buffer contains incomplete UTF-8 data, we will
                            // print the valid part, copy the invalid sequence to
                            // the beginning of the buffer and set an offset for the
                            // next read.
                            //
                            // NB. There is actually an additional case here that should be
                            // handled in a real implementation. The Utf8Error may also contain
                            // an error_len field indicating that there is actually an invalid UTF-8
                            // sequence in the middle of the buffer. Such an error would not be
                            // recoverable through our offset and copy mechanism. The result will be
                            // that the invalid sequence will be copied to the front of the buffer and
                            // eventually the buffer will be filled until no more bytes can be read when
                            // the offset == buf.len(). At this point the loop will exit without reading
                            // any more of the response.
                            let valid_up_to = error.valid_up_to();
                            unsafe {
                                // It's ok to use unsafe here as the error code already told us that
                                // the UTF-8 data up to this point is valid, so we can tell the compiler
                                // it's fine.
                                print!("{}", str::from_utf8_unchecked(&buf[..valid_up_to]));
                            }
                            buf.copy_within(valid_up_to.., 0);
                            offset = size_plus_offset - valid_up_to;
                        }
                    }
                }
            }
            println!("Total: {} bytes", total);
        }
        _ => bail!("Unexpected response code: {}", status),
    }

    Ok(())
}

pub fn wifi(
    ssid: &str,
    pass: &str,
    modem: impl peripheral::Peripheral<P = esp_idf_svc::hal::modem::Modem> + 'static,
    sysloop: EspSystemEventLoop,
) -> Result<Box<EspWifi<'static>>> {
    let mut auth_method = AuthMethod::WPA2Personal;
    if ssid.is_empty() {
        bail!("Missing WiFi name")
    }
    if pass.is_empty() {
        auth_method = AuthMethod::None;
        info!("Wifi password is empty");
    }
    let mut esp_wifi = EspWifi::new(modem, sysloop.clone(), None)?;

    let mut wifi = BlockingWifi::wrap(&mut esp_wifi, sysloop)?;

    wifi.set_configuration(&esp_idf_svc::wifi::Configuration::Client(
        ClientConfiguration::default(),
    ))?;

    info!("Starting wifi...");

    wifi.start()?;

    info!("Scanning...");

    let ap_infos = wifi.scan()?;

    let ours = ap_infos.into_iter().find(|a| a.ssid == ssid);

    let channel = if let Some(ours) = ours {
        info!(
            "Found configured access point {} on channel {}",
            ssid, ours.channel
        );
        Some(ours.channel)
    } else {
        info!(
            "Configured access point {} not found during scanning, will go with unknown channel",
            ssid
        );
        None
    };
    let ssid = heapless::String::<32>::from_str(ssid).expect("bad type casting of ssid");
    let password = heapless::String::<64>::from_str(pass).expect("bad type casting of password.");
    wifi.set_configuration(&esp_idf_svc::wifi::Configuration::Client(
        ClientConfiguration {
            ssid,
            password,
            channel,
            auth_method,
            ..Default::default()
        },
    ))?;

    info!("Connecting wifi...");

    wifi.connect()?;

    info!("Waiting for DHCP lease...");

    wifi.wait_netif_up()?;

    let ip_info = wifi.wifi().sta_netif().get_ip_info()?;

    info!("Wifi DHCP info: {:?}", ip_info);

    Ok(Box::new(esp_wifi))
}

#[derive(Clone, Debug, Default)]
pub struct EspHttpCashuClient;

impl EspHttpCashuClient {
    pub fn new() -> Self {
        todo!()
    }
}

impl CashuClient for EspHttpCashuClient {
    fn get_keys(&self, mint_url: &Url) -> std::prelude::v1::Result<KeysResponse, MokshaWalletError> {
        todo!()
    }

    fn get_keys_by_id(
        &self,
        mint_url: &Url,
        keyset_id: String,
    ) -> std::prelude::v1::Result<KeysResponse, MokshaWalletError> {
        todo!()
    }

    fn get_keysets(&self, mint_url: &Url) -> std::prelude::v1::Result<V1Keysets, MokshaWalletError> {
        todo!()
    }

    fn post_swap(
        &self,
        mint_url: &Url,
        proofs: Proofs,
        output: Vec<BlindedMessage>,
    ) -> std::prelude::v1::Result<PostSwapResponse, MokshaWalletError> {
        todo!()
    }

    fn post_melt_bolt11(
        &self,
        mint_url: &Url,
        proofs: Proofs,
        quote: String,
        outputs: Vec<BlindedMessage>,
    ) -> std::prelude::v1::Result<PostMeltBolt11Response, MokshaWalletError> {
        todo!()
    }

    fn post_melt_quote_bolt11(
        &self,
        mint_url: &Url,
        payment_request: String,
        unit: CurrencyUnit,
    ) -> std::prelude::v1::Result<PostMeltQuoteBolt11Response, MokshaWalletError> {
        todo!()
    }

    fn get_melt_quote_bolt11(
        &self,
        mint_url: &Url,
        quote: String,
    ) -> std::prelude::v1::Result<PostMeltQuoteBolt11Response, MokshaWalletError> {
        todo!()
    }

    fn post_mint_bolt11(
        &self,
        mint_url: &Url,
        quote: String,
        blinded_messages: Vec<BlindedMessage>,
    ) -> std::prelude::v1::Result<PostMintBolt11Response, MokshaWalletError> {
        todo!()
    }

    fn post_mint_quote_bolt11(
        &self,
        mint_url: &Url,
        amount: u64,
        unit: CurrencyUnit,
    ) -> std::prelude::v1::Result<PostMintQuoteBolt11Response, MokshaWalletError> {
        todo!()
    }

    fn get_mint_quote_bolt11(
        &self,
        mint_url: &Url,
        quote: String,
    ) -> std::prelude::v1::Result<PostMintQuoteBolt11Response, MokshaWalletError> {
        todo!()
    }

    fn get_info(&self, mint_url: &Url) -> std::prelude::v1::Result<MintInfoResponse, MokshaWalletError> {
        todo!()
    }

    fn is_v1_supported(&self, mint_url: &Url) -> std::prelude::v1::Result<bool, MokshaWalletError> {
        todo!()
    }

    fn post_mint_onchain(
        &self,
        mint_url: &Url,
        quote: String,
        blinded_messages: Vec<BlindedMessage>,
    ) -> std::prelude::v1::Result<PostMintOnchainResponse, MokshaWalletError> {
        todo!()
    }

    fn post_mint_quote_onchain(
        &self,
        mint_url: &Url,
        amount: u64,
        unit: CurrencyUnit,
    ) -> std::prelude::v1::Result<PostMintQuoteOnchainResponse, MokshaWalletError> {
        todo!()
    }

    fn get_mint_quote_onchain(
        &self,
        mint_url: &Url,
        quote: String,
    ) -> std::prelude::v1::Result<PostMintQuoteOnchainResponse, MokshaWalletError> {
        todo!()
    }

    fn post_melt_onchain(
        &self,
        mint_url: &Url,
        proofs: Proofs,
        quote: String,
    ) -> std::prelude::v1::Result<PostMeltOnchainResponse, MokshaWalletError> {
        todo!()
    }

    fn post_melt_quote_onchain(
        &self,
        mint_url: &Url,
        address: String,
        amount: u64,
        unit: CurrencyUnit,
    ) -> std::prelude::v1::Result<Vec<PostMeltQuoteOnchainResponse>, MokshaWalletError> {
        todo!()
    }

    fn get_melt_quote_onchain(
        &self,
        mint_url: &Url,
        quote: String,
    ) -> std::prelude::v1::Result<PostMeltQuoteOnchainResponse, MokshaWalletError> {
        todo!()
    }

    fn get_melt_onchain(
        &self,
        mint_url: &Url,
        txid: String,
    ) -> std::prelude::v1::Result<GetMeltOnchainResponse, MokshaWalletError> {
        todo!()
    }
}

#[derive(Clone, Debug)]
pub struct EspFlashLocalStore;

impl EspFlashLocalStore {
    pub fn new() -> Self {
        todo!()
    }
}

impl moksha_wallet::localstore::LocalStore for EspFlashLocalStore {
    fn delete_proofs(
        &self,
        tx: &mut RexieTransaction,
        proofs: &Proofs,
    ) -> std::prelude::v1::Result<(), MokshaWalletError> {
        todo!()
    }

    fn add_proofs(
        &self,
        tx: &mut RexieTransaction,
        proofs: &Proofs,
    ) -> std::prelude::v1::Result<(), MokshaWalletError> {
        todo!()
    }

    fn get_proofs(&self, tx: &mut RexieTransaction) -> std::prelude::v1::Result<Proofs, MokshaWalletError> {
        todo!()
    }

    fn get_keysets(&self) -> std::prelude::v1::Result<Vec<WalletKeyset>, MokshaWalletError> {
        todo!()
    }

    fn add_keyset(&self, keyset: &WalletKeyset) -> std::prelude::v1::Result<(), MokshaWalletError> {
        todo!()
    }
}
